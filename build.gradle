plugins {
    id 'groovy'
    id 'java-gradle-plugin'
    id 'maven'
    id 'eclipse'
    id 'jacoco'
}

apply from: 'functional-test.gradle'

repositories {
	jcenter()
	mavenCentral()
	maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
	mavenLocal()
	maven { url 'https://maven.google.com' }
}


group = PLUGIN_GROUP
version = PLUGIN_VERSION


// Adds gradleApi() (compile) (and >should< gradleTestKit() (testCompile) dependencies)
gradlePlugin {
	testSourceSets sourceSets.functionalTest

    plugins {
        pimutdroidPlugin {
            id = 'at.woodstick.pimutdroid'
            implementationClass = 'at.woodstick.pimutdroid.PimutdroidPlugin'
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.enabled true
    }
}

task cleanNebula(type: Delete) {
	group "build"
	description "Deletes the nebula test directory."
	
	delete "${project.buildDir}/nebulatest"
}

task startEmulator() {
	doLast {
		Runtime.getRuntime().exec("cmd /c scripts\\start-emulator.bat ${EMULATOR_PORT} ${EMULATOR_NAME}");
	}
}

task stopEmulator(type: Exec) {
	commandLine "cmd", "/c", "scripts\\kill-emulator.bat ${EMULATOR_PORT}"
}


dependencies {
    compile localGroovy()
	
	compile group: "pl.droidsonroids.gradle", name: "gradle-pitest-plugin", version: "0.1.5"
	
	//runtime 'com.android.tools.build:gradle:3.0.1'
	
//	compile group: "com.google.guava", name: "guava", version: "23.4-jre"
	compile group: "com.fasterxml.jackson.dataformat", name: "jackson-dataformat-xml", version: "2.9.2"
//	compile 'org.apache.commons:commons-lang3:3.6'
	
	testCompile gradleTestKit()
	
//	testCompile 'org.apache.commons:commons-io:1.3.2'
	testCompile 'junit:junit:4.12'
	testCompile 'org.hamcrest:hamcrest-all:1.3'
	testCompile 'org.assertj:assertj-core:3.8.0'
	testCompile 'org.easymock:easymock:3.5.1'
	
	testCompile 'com.netflix.nebula:nebula-test:6.3.0'
	testCompile('org.spockframework:spock-core:1.1-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

eclipse {
	classpath {
		downloadJavadoc = true
		downloadSources = true
	}
}

/*
import org.gradle.plugins.ide.eclipse.model.*

private void addGradleSourceDeps() {
  project.extensions.eclipse.classpath.file.whenMerged { Classpath cp ->
    String gradleHome = gradle.getGradleHomeDir().absolutePath.replace(File.separator, '/')
    String gradleSrc = "${gradleHome}/src"
    cp.entries.each {ClasspathEntry entry ->
      if ((entry in AbstractLibrary) && (entry.library.file.name.startsWith('gradle-'))) {
        def matcher = entry.library.file.name =~ "gradle-(.*)-(.*)"
        if(matcher) {
	        String sourcePath= gradleSrc + '/' + matcher[0][1];
	        entry.sourcePath = new org.gradle.plugins.ide.eclipse.model.internal.FileReferenceFactory().fromPath(sourcePath)
        }
		println "not matched for ${entry.library.file.name}"
      }
    }
  }
}
addGradleSourceDeps()
*/
